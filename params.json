{"name":"Fbgraph","tagline":"Facebook Open Graph API in Ruby","body":"h2. FBGRaph\r\n\r\np. Facebook Open Graph API Gem for Rails 3.\r\n\r\n\r\nh2. Resources\r\n\r\n* \"View RDoc on RDoc.info\":http://rdoc.info/projects/nsanta/fbgraph\r\n\r\n* \"View Source on GitHub\":http://github.com/nsanta/fbgraph\r\n\r\n* \"Report Issues on GitHub\":http://github.com/nsanta/fbgraph/issues\r\n\r\n\r\nh2. Installation\r\n\r\nnotextile. <code> gem install fbgraph</code>\r\n\r\np. Be sure to require it\r\n\r\nnotextile. <code>require \"fbgraph\"</code>\r\n\r\np. or add this line into Gemfile for Rails 3\r\n\r\nnotextile. <code>gem \"fbgraph\"</code>\r\n\r\n\r\nh2. Example Apps\r\n\r\n\"Rails 3 Example\":http://github.com/nsanta/fbgraph_example\r\n\r\nh2. Usage\r\n\r\np. FBGraph supports most (no analytics yet) features of Facebook Open Graph API: developers.facebook.com/docs/reference/api/\r\n\r\n**IMPORTANT!!**  Facebook object IDs can be very large numbers--too large to fit in a regular SQL \"INTEGER\" column.  If you use an integer column, your database will likely just store the largest number allowed resulting in a bug that may confound you beyond belief.\r\n\r\n**IF YOU PLAN TO STORE FACEBOOK GRAPH OBJECT IDS IN YOUR DATABASE, YOU MUST USE A BIGINT COLUMN, NOT A STANDARD INTEGER COLUMN!**\r\n\r\nh3. Initialization\r\n\r\np. Without a token (for authorization)\r\n\r\nnotextile. <code>client = FBGraph::Client.new(:client_id => 'client_id',:secret_id =>'secret_id')</code>\r\n\r\np. With a token\r\n\r\nnotextile. <code>client = FBGraph::Client.new(:client_id => 'client_id',:secret_id =>'secret_id' ,:token => token)</code>\r\n\r\np. All methods are chainable\r\n\r\nExamples:\r\n\r\nnotextile. <code>client.selection.me.photos.until(Time.now.to_s).since(3.days.ago).limit(10).info!</code>\r\n\r\nnotextile. <code>client.selection.user('id').videos.offset(10).info!</code>\r\n\r\nnotextile. <code>client.search.query('q').on('users').limit(20).info!</code>\r\n\r\nh3. Rails config file\r\n\r\nh2. TODO\r\n\r\nh3. Authorization\r\n\r\nh4. client.authorization.authorize_url\r\n\r\np. returns the authorize url\r\n\r\nnotextile. <code> redirect_to client.authorization.authorize_url(:redirect_uri => callback_url , :scope => 'email,user_photos,friends_photos')</code>\r\n\r\nh4. client.authorization.process_callback\r\n\r\np. process the callback and returns the access token\r\n\r\nnotextile. <code> access_token = client.authorization.process_callback(params[:code], :redirect_uri => callback_url)</code>\r\n\r\nh3. Exchange Sessions\r\n\r\nh2. TODO\r\n\r\nh3. Canvas\r\n\r\nFacebook send a signed_request as a parameter. Can be decoded with the method parse_signed_request of FBGraph::Canvas module\r\n\r\n> FBGraph::Canvas.parse_signed_request(app_secret, params[:signed_request])\r\n\r\nh3. Selection\r\n\r\nh4. Accessing objects with connection types.\r\n\r\np. All objects and their connections can be accesed\r\n\r\nExamples:\r\n\r\nnotextile. <code> client.selection.me.home.info!</code>\r\n\r\nnotextile. <code> client.selection.user('id').photos.info!</code>\r\n\r\nnotextile. <code> client.selection.photo('id').comments.info!</code>\r\n\r\nnotextile. <code> client.selection.page('id').info!</code>\r\n\r\np. Also you can get results of more than 1 objects\r\n\r\nExample:\r\n\r\nnotextile. <code> client.selection.user([id1,id2,id3]).info!</code>\r\n\r\n\r\nh4. client.selection.info!\r\n\r\np. request with GET for information and return the response parsed with JSON. You can disable the parsing passing false as a first and unique parameter\r\n\r\nnotextile. <code> user_info = client.selection.me.info! </code>\r\n\r\n\r\nh3. Publishing\r\n\r\nh4. client.selection.publish!\r\n\r\np. request with POST for publishing and return the response parsed with JSON. You can disable the parsing passing false as a first and unique parameter\r\n\r\nnotextile. <code> client.selection.post('id').comments.params(:message => 'comment test').publish! </code>\r\n\r\np. OR\r\n\r\nnotextile. <code> client.selection.post('id').comments.publish!(:message => 'comment test') </code>\r\n\r\n\r\nh3. Deletion\r\n\r\nh4. client.selection.delete!\r\n\r\np. request with DELETE for deletion and return the response parsed with JSON. You can disable the parsing passing false as a first and unique parameter\r\n\r\nnotextile. <code> client.selection.post('id').delete!</code>\r\n\r\n\r\nh3. Picture\r\n\r\n\r\nh4. client.selection.picture\r\n\r\np. return the url of the object picture\r\n\r\nnotextile. <code> client.selection.me.picture </code>\r\n\r\n\r\nh3. Paging\r\n\r\nh4. client.selection.limit\r\n\r\n\r\nnotextile. <code> client.selection.me.photos.limit(3).info! </code>\r\n\r\nh4. client.selection.offset\r\n\r\n\r\nnotextile. <code> client.selection.me.photos.offset(10).info! </code>\r\n\r\nh4. client.selection.until\r\n\r\n\r\nnotextile. <code> client.selection.me.photos.until(Time.now.to_s).info! </code>\r\n\r\nh4. client.selection.since\r\n\r\n\r\nnotextile. <code> client.selection.me.photos.since(3.days.ago).info! </code>\r\n\r\n\r\nh3. Search\r\n\r\nh4. client.search.query('query').info!\r\n\r\np.  Get the search results \r\n\r\nnotextile. <code> results = client.search.query('facebook').info! </code>\r\n\r\n\r\nh4. client.search.query('query')on('type').info!\r\n\r\np.  Get the search results by type\r\n\r\nnotextile. <code> results = client.search.query('facebook').on('home').info! </code>\r\n\r\nh3. RealTime Updates\r\n\r\nh4. client.realtime.user\r\n\r\nh4. client.realtime.permissions\r\n\r\nh4. client.realtime.errors\r\n\r\np. Set the object to be subscribed, modified or unsubscribed\r\n\r\nh4. client.realtime.fields('email,picture')\r\n\r\np. Set the objects fields \r\n\r\n\r\nh4. client.realtime.callback_url(url)\r\n\r\np. Set the callback url\r\n\r\n\r\nh4. client.realtime.verify_token(token)\r\n\r\np. Set the verify token (optional)\r\n\r\nh4. client.realtime.subscribe!\r\n\r\np. Send the request for add/modify a subscription for realtime Updates.\r\n\r\n\r\nExamples:\r\n\r\nnotextile. <code> results = client.realtime.user.fields('email,picture').callback_url(url).verify_token('token').subscribe! </code>\r\n\r\nnotextile. <code> results = client.realtime.permissions.fields('read_stream').callback_url(url).subscribe! </code>\r\n\r\nIf you want delete a subscirpition, you can use the delete! method.\r\n\r\nExamples:\r\n\r\nnotextile. <code> results = client.realtime.user.delete!</code>\r\n\r\n\r\nh3. FQL\r\n\r\nh4. client.fql.query(\"SELECT name FROM user WHERE uid = me()\")\r\n\r\n\r\nh3. Timeline\r\n\r\nh4. client.timeline.action('namespace', 'run').param(:location => [location object URL])\r\n\r\nh4. client.timeline.reads.param(:article => [article object URL] )\r\n\r\n\r\nh3. Analytics\r\n\r\nh4. TODO\r\n\r\nh3. Advanced\r\n\r\nh4. not documented yet\r\n\r\n\r\nh2. Credits\r\n\r\nExamples:\r\n\r\nnotextile. <code> results = client.selection.user(USER_ID).payments.info!(:status => STATUS). </code>\r\n\r\nnotextile. <code> results = client.selection.order(ORDER_ID).publish!(:status => STATUS) </code>  \r\n\r\n\r\nh2. Contributions\r\n\r\np. Just do a pull request with the repo in sync.\r\n\r\n\r\n\r\nh2. Maintainers\r\n\r\n\"Nicolas Santa\":http://github.com/nsanta\r\n\r\n\"Matt Lightner (via RedRadiant)\":http://github.com/redradiant\r\n\r\n\"Victor Costan\":http://github.com/pwnall\r\n\r\nh2. Contributors List\r\n\r\n\"Mark Bates\":http://github.com/markbates\r\n\r\n\"Florent Guilleux\":http://github.com/Florent2\r\n\r\n\"Jan De Poorter\":http://github.com/DefV\r\n\r\n\"Thilo-Alexander Ginkel\":http://github.com/ginkel\r\n\r\n\"Matias Käkelä\":http://github.com/massive\r\n\r\n\"Max De Marzi\":http://github.com/maxdemarzi\r\n\r\n\"Peter Boling\":https://github.com/pboling\r\n\r\n\"Roberto Miranda\":https://github.com/robertomiranda\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}